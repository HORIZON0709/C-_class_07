//===================================================
//
//授業その7[wizard.cpp]
//Author:KishimotoEiji
//
//===================================================

//********************************
//インクルード
//********************************
#include "wizard.h"
#include "main.h"

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <assert.h>

//********************************
//プロトタイプ宣言
//********************************
namespace
{

}// namespaceはここまで

//===================================================
//コンストラクタ
//===================================================
CWizard::CWizard()
{
	//メンバ変数をクリア
	m_nMp = 0;
}

//===================================================
//デストラクタ
//===================================================
CWizard::~CWizard()
{
	/* 処理無し */
}

//===================================================
//初期化
//===================================================
void CWizard::Init()
{
	//乱数
	srand((unsigned)time(NULL));

	//ステータスの設定
	SetHp(rand() % 50 + 50);
	SetAttack(rand() % 5 + 5);

	//メンバ変数を初期化
	m_nMp = rand() % 6 + 2;
}

//===================================================
//出力
//===================================================
void CWizard::Output()
{
	printf("\n 魔法使い … HP : [%d] /", GetHp());
	printf(" 攻撃力 : [%d] /", GetAttack());
	printf(" MP : [%d]", m_nMp);
}

//===================================================
//終了
//===================================================
void CWizard::Uninit()
{
	int nWizard = 1;	//魔法使い

	if (m_apCharacter[nWizard] == nullptr)
	{//NULLチェック
		return;
	}

	/* nullptrではない */

	//メモリの解放
	delete m_apCharacter[nWizard];
	m_apCharacter[nWizard] = nullptr;
}

//===================================================
//攻撃する
//===================================================
void CWizard::Attack(CCharacter* pTarget)
{
	//メッセージ
	printf("\n 魔法使いの攻撃！相手に[ %d ]のダメージ！", GetAttack());

	pTarget->BeAttacked(GetAttack());	//相手にダメージを与える

	if (m_nMp > 0)
	{//0未満にはならない
		m_nMp--;	//MPを消費
	}

	//メッセージ
	printf("\n 残りのMP : [ %d ]", m_nMp);

	if (m_nMp <= 0)
	{//MPが0以下になったとき
		int nAtkHalf = (GetAttack() / 2);	//攻撃力半減
		SetAttack(nAtkHalf);	//攻撃力の設定
	}
}

//===================================================
//攻撃を受ける
//===================================================
void CWizard::BeAttacked(const int nDamage)
{
	int nHp = GetHp();	//現在のHPを取得

	nHp -= nDamage;	//受けたダメージ分減らす

	SetAttack(nHp);	//残りのHPを設定する

	//表示
	printf("\n 残りHP : [%d]",GetHp());
}